/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pt.inescid.nosqlundo.gui;

import java.util.HashMap;
import java.util.Set;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import pt.inescid.nosqlundo.MongoConnection;
import pt.inescid.nosqlundo.MongoUndo;

/**
 *
 * @author davidmatos
 */
public class JDialogConnection extends javax.swing.JDialog {

    private JList lstConnections;

    private MongoConnection mongoConnection = null;

    /**
     * Creates new form JDialogConnection
     */
    public JDialogConnection(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * Creates new form JDialogConnection
     */
    public JDialogConnection(java.awt.Frame parent, boolean modal, JList lstConections) {
        super(parent, modal);
        this.lstConnections = lstConections;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtConnectionName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtServerAddress = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtServerPort = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtPassword = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel1.setText("MongoDB Connection");

        jLabel2.setText("Connection name");

        jLabel3.setText("Server address");

        jLabel4.setText("Server port");

        jLabel5.setText("Username");

        jLabel6.setText("Password");

        btnSave.setLabel("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnCancel.setLabel("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 196, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtConnectionName)
                            .addComponent(txtServerAddress)
                            .addComponent(txtServerPort)
                            .addComponent(txtUsername)
                            .addComponent(txtPassword)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSave)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtConnectionName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtServerAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtServerPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnCancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        save();
    }//GEN-LAST:event_btnSaveActionPerformed

    

    public void populateConnectionsList() {
        HashMap<String, MongoConnection> connections = MongoUndo.getConnectionsList();
        DefaultListModel listModel = new DefaultListModel<String>();
        lstConnections.removeAll();
        Set<String> keys = connections.keySet();
        for (String key : keys) {
            MongoConnection connection = connections.get(key);
            listModel.addElement(connection.getConnectionName());
        }
        // lstConnections.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        lstConnections.setLayoutOrientation(JList.VERTICAL);
        lstConnections.setVisibleRowCount(-1);
        lstConnections.setModel(listModel);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField txtConnectionName;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtServerAddress;
    private javax.swing.JTextField txtServerPort;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables

    private void save() {
        try {
            Integer.parseInt(txtServerPort.getText());
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(null, "The port value must be an integer value");
            return;
        }

        HashMap<String, MongoConnection> connections = MongoUndo.getConnectionsList();
        for (String key : connections.keySet()) {
            if (connections.get(key).getConnectionName().equals(txtConnectionName.getText()) && mongoConnection == null) {
                JOptionPane.showMessageDialog(null, "The connection name '"
                        + txtConnectionName.getText() + "' already exists, please chose a new one.");
                return;
            }
        }

        if (mongoConnection == null) {
            mongoConnection = new MongoConnection(
                    txtConnectionName.getText(),
                    txtServerAddress.getText(),
                    Integer.parseInt(txtServerPort.getText()),
                    txtUsername.getText(), txtPassword.getText());
            MongoUndo.addConnection(mongoConnection);
        } else {
            mongoConnection.setConnectionName(txtConnectionName.getText());
            mongoConnection.setServerAddress(txtServerAddress.getText());
            mongoConnection.setServerPort(Integer.parseInt(txtServerPort.getText()));
            mongoConnection.setUsername(txtUsername.getText());
            mongoConnection.setPassword(txtPassword.getText());
        }
        MongoUndo.updateConnection(mongoConnection);
        populateConnectionsList();
        setVisible(false);
    }

    public MongoConnection getMongoConnection() {
        return mongoConnection;
    }

    public void setMongoConnection(MongoConnection mongoConnection) {
        this.mongoConnection = mongoConnection;
        txtConnectionName.setText(mongoConnection.getConnectionName());
        txtServerAddress.setText(mongoConnection.getServerAddress());
        txtServerPort.setText(mongoConnection.getServerPort() + "");
        txtUsername.setText(mongoConnection.getUsername());
        txtPassword.setText(mongoConnection.getPassword());
    }

}
