/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pt.ist.mongoundo.gui;

import com.mongodb.BasicDBObject;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.MongoIterable;
import java.awt.Component;
import java.awt.Font;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.DefaultListSelectionModel;
import javax.swing.JCheckBox;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.plaf.basic.BasicListUI;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import org.bson.Document;
import org.bson.types.ObjectId;

import pt.ist.mongoundo.MongoUndo;
import pt.ist.mongoundo.MongoUndoConstants;

/**
 *
 * @author davidmatos
 */
public class JFrameMain extends javax.swing.JFrame {

    /**
     * Creates new form JFrameMain
     */
    public JFrameMain() {
        initComponents();
        hideScreen();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPaneMain = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tree = new javax.swing.JTree();
        tabMain = new javax.swing.JTabbedPane();
        pnlDocuments = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTableDocumentLog = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableDocumentVersions = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTableDocuments = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        pnlLog = new javax.swing.JPanel();
        jSplitPane3 = new javax.swing.JSplitPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblLog = new javax.swing.JTable();
        pnlRecoverActions = new javax.swing.JPanel();
        btnRecoverSelective = new javax.swing.JButton();
        btnRecoverUndo = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblTs = new javax.swing.JLabel();
        lblOp = new javax.swing.JLabel();
        lblNs = new javax.swing.JLabel();
        lblO = new javax.swing.JLabel();
        jMenuBarMain = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemMongoConnections = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemQuit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItemAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setMinimumSize(new java.awt.Dimension(100, 100));

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("MongoUndo");
        tree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        tree.setMinimumSize(new java.awt.Dimension(100, 100));
        tree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                treeValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(tree);

        jSplitPaneMain.setLeftComponent(jScrollPane1);

        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jTableDocumentLog.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(jTableDocumentLog);

        jLabel7.setText("Operations that affected this document");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE)
            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE))
        );

        jSplitPane1.setTopComponent(jPanel3);

        jTableDocumentVersions.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(jTableDocumentVersions);

        jLabel6.setText("Versions of this document");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(jPanel2);

        jSplitPane2.setRightComponent(jSplitPane1);

        jTableDocuments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(jTableDocuments);

        jLabel5.setText("Documents in this collection");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE)
            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE))
        );

        jLabel5.getAccessibleContext().setAccessibleName("jLabelDocumentsTable");

        jSplitPane2.setTopComponent(jPanel1);

        javax.swing.GroupLayout pnlDocumentsLayout = new javax.swing.GroupLayout(pnlDocuments);
        pnlDocuments.setLayout(pnlDocumentsLayout);
        pnlDocumentsLayout.setHorizontalGroup(
            pnlDocumentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        pnlDocumentsLayout.setVerticalGroup(
            pnlDocumentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDocumentsLayout.createSequentialGroup()
                .addComponent(jSplitPane2)
                .addContainerGap())
        );

        tabMain.addTab("Documents", pnlDocuments);

        tblLog.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tblLog);

        jSplitPane3.setLeftComponent(jScrollPane3);

        btnRecoverSelective.setText("Selective Recovery");
        btnRecoverSelective.setToolTipText("");

        btnRecoverUndo.setText("Undo Recovery");

        jLabel1.setText("Timestamp");

        jLabel2.setText("op");

        jLabel3.setText("ns");

        jLabel4.setText("o");

        javax.swing.GroupLayout pnlRecoverActionsLayout = new javax.swing.GroupLayout(pnlRecoverActions);
        pnlRecoverActions.setLayout(pnlRecoverActionsLayout);
        pnlRecoverActionsLayout.setHorizontalGroup(
            pnlRecoverActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRecoverActionsLayout.createSequentialGroup()
                .addComponent(btnRecoverUndo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnRecoverSelective))
            .addGroup(pnlRecoverActionsLayout.createSequentialGroup()
                .addGroup(pnlRecoverActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(47, 47, 47)
                .addGroup(pnlRecoverActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblOp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblNs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblO, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlRecoverActionsLayout.setVerticalGroup(
            pnlRecoverActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlRecoverActionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlRecoverActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblTs))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlRecoverActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(lblOp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlRecoverActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(lblNs))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlRecoverActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(lblO))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 611, Short.MAX_VALUE)
                .addGroup(pnlRecoverActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRecoverSelective)
                    .addComponent(btnRecoverUndo)))
        );

        jSplitPane3.setRightComponent(pnlRecoverActions);

        javax.swing.GroupLayout pnlLogLayout = new javax.swing.GroupLayout(pnlLog);
        pnlLog.setLayout(pnlLogLayout);
        pnlLogLayout.setHorizontalGroup(
            pnlLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 494, Short.MAX_VALUE)
        );
        pnlLogLayout.setVerticalGroup(
            pnlLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane3)
        );

        tabMain.addTab("Log", pnlLog);

        jSplitPaneMain.setRightComponent(tabMain);

        jMenu1.setText("MongoUndo");

        jMenuItemMongoConnections.setText("MongoDB Connections");
        jMenuItemMongoConnections.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemMongoConnectionsActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemMongoConnections);
        jMenu1.add(jSeparator1);

        jMenuItemQuit.setText("Quit");
        jMenuItemQuit.setToolTipText("");
        jMenuItemQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemQuitActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemQuit);

        jMenuBarMain.add(jMenu1);

        jMenu2.setText("Help");

        jMenuItemAbout.setText("About MongoUndo");
        jMenuItemAbout.setToolTipText("");
        jMenuItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAboutActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemAbout);

        jMenuBarMain.add(jMenu2);

        setJMenuBar(jMenuBarMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPaneMain, javax.swing.GroupLayout.DEFAULT_SIZE, 628, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPaneMain, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemQuitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItemQuitActionPerformed

    private void jMenuItemMongoConnectionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemMongoConnectionsActionPerformed
        JDialogConnections jDialogConnections = new JDialogConnections(this, true);
        jDialogConnections.setVisible(true);

    }//GEN-LAST:event_jMenuItemMongoConnectionsActionPerformed

    private void jMenuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAboutActionPerformed
        JDialogAbout jDialogAbout = new JDialogAbout(this, true);
        jDialogAbout.setVisible(true);
    }//GEN-LAST:event_jMenuItemAboutActionPerformed

    private void treeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_treeValueChanged
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();
        populateDocuments(node.getParent().toString(), node.toString());
        populateCollectionLog(node.getParent().toString(), node.toString());

    }//GEN-LAST:event_treeValueChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRecoverSelective;
    private javax.swing.JButton btnRecoverUndo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBarMain;
    private javax.swing.JMenuItem jMenuItemAbout;
    private javax.swing.JMenuItem jMenuItemMongoConnections;
    private javax.swing.JMenuItem jMenuItemQuit;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JSplitPane jSplitPaneMain;
    private javax.swing.JTable jTableDocumentLog;
    private javax.swing.JTable jTableDocumentVersions;
    private javax.swing.JTable jTableDocuments;
    private javax.swing.JLabel lblNs;
    private javax.swing.JLabel lblO;
    private javax.swing.JLabel lblOp;
    private javax.swing.JLabel lblTs;
    private javax.swing.JPanel pnlDocuments;
    private javax.swing.JPanel pnlLog;
    private javax.swing.JPanel pnlRecoverActions;
    private javax.swing.JTabbedPane tabMain;
    private javax.swing.JTable tblLog;
    private javax.swing.JTree tree;
    // End of variables declaration//GEN-END:variables

    private void hideScreen() {
        this.tree.removeAll();
        this.jTableDocuments.removeAll();

    }

    public void populateTree() {
        DefaultTreeModel model = (DefaultTreeModel) tree.getModel();
        ((DefaultMutableTreeNode) model.getRoot()).removeAllChildren();

        DefaultMutableTreeNode top = new DefaultMutableTreeNode("MongoDatabases");

        List<String> databaseNames = MongoUndo.mongoClient.getDatabaseNames();
        for (String databaseName : databaseNames) {

            DefaultMutableTreeNode databaseNode = new DefaultMutableTreeNode(databaseName);
            top.add(databaseNode);
            MongoDatabase database = MongoUndo.mongoClient.getDatabase(databaseName);
            MongoIterable<String> collections = database.listCollectionNames();

            for (String collection : collections) {

                DefaultMutableTreeNode tableNode = new DefaultMutableTreeNode(collection);
                databaseNode.add(tableNode);

            }

        }

        ((DefaultMutableTreeNode) model.getRoot()).add(top);
        model.reload();
    }

    private void populateDocuments(String databaseName, String collectionName) {
        jTableDocuments.removeAll();

        ArrayList<String> headers = new ArrayList<String>();

        MongoDatabase database = MongoUndo.mongoClient.getDatabase(databaseName);
        FindIterable<Document> documents = database.getCollection(collectionName).find();
        ArrayList<HashMap<String, String>> rows = new ArrayList<HashMap<String, String>>();
        for (Document document : documents) {
            HashMap<String, String> row = new HashMap<String, String>();
            for (String key : document.keySet()) {
                if (!headers.contains(key)) {
                    headers.add(key);
                }
                row.put(key, document.get(key).toString());
            }
            rows.add(row);
        }

        Object[][] data = new Object[rows.size()][headers.size()];
        for (int i = 0; i < rows.size(); i++) {
            for (int j = 0; j < headers.size(); j++) {

                data[i][j] = rows.get(i).get(headers.get(j));

            }
        }

        DefaultTableModel defaultTableModel = new DefaultTableModel(data, headers.toArray());
        ListSelectionListener listSelectionListener = new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (jTableDocuments.getSelectedRow() < 0) {
                    return;
                }
                int index = jTableDocuments.getSelectedRow();
                Object _id = jTableDocuments.getValueAt(index, 0);
                populateDocumentLog(databaseName, collectionName, _id.toString());

            }
        };

        jTableDocuments.setModel(defaultTableModel);
        jTableDocuments.getSelectionModel().addListSelectionListener(listSelectionListener);
    }

    private void populateDocumentLog(String database, String collection, String _id) {
        jTableDocumentLog.removeAll();
        String ns = database + "." + collection;
        ObjectId id = new ObjectId(_id);
        System.out.println("Selected=" + _id + " from ns=" + ns);
        HashMap<String, Object> whereMap = new HashMap<String, Object>();

        whereMap.put("ns", ns);

        HashMap<String, Object> or = new HashMap<String, Object>();

        Document o = new Document("o._id", id);
        Document o2 = new Document("o2._id", id);

        ArrayList<Document> oArray = new ArrayList<Document>();
        oArray.add(o);
        oArray.add(o2);
        whereMap.put("$or", oArray);

        Document where = new Document(whereMap);

        FindIterable<Document> itLogEntries = MongoUndo.mongoClient.
                getDatabase(MongoUndoConstants.LOCAL_DB).
                getCollection(MongoUndoConstants.OP_LOG_TABLE).find(where).sort(new Document("ts", -1));
        populateDocumentVersions(MongoUndo.mongoClient.
                getDatabase(MongoUndoConstants.LOCAL_DB).
                getCollection(MongoUndoConstants.OP_LOG_TABLE).find(where).sort(new Document("ts", 1)));
        String[] headers = new String[]{"ts", "op", "ns", "o"};
        ArrayList<String[]> rows = new ArrayList<String[]>();
        for (Document logEntry : itLogEntries) {
            System.out.println("LogEntry:" + logEntry.toString());
            rows.add(new String[]{
                logEntry.get(headers[0]).toString(),
                logEntry.get(headers[1]).toString(),
                logEntry.get(headers[2]).toString(),
                logEntry.get(headers[3]).toString()
            });
        }
        String[][] data = new String[rows.size()][headers.length];
        for (int i = 0; i < rows.size(); i++) {
            data[i] = rows.get(i);
        }
        jTableDocumentLog.setModel(new DefaultTableModel(data, headers));
    }

    private void populateDocumentVersions(FindIterable<Document> logEntries) {
        jTableDocumentVersions.removeAll();

        ArrayList<String> headers = new ArrayList<>();
        headers.add("Version");
        ArrayList<HashMap<String, Object>> rows = new ArrayList<>();
        HashMap<String, Object> row = new HashMap<>();
        for (Document logEntry : logEntries) {
            Document document = (Document) logEntry.get("o");

            if(logEntry.get("op").equals("i")){
                
            }else if(logEntry.get("op").equals("u")){
                document = (Document) document.get("$set");
            
            }
            if (document != null) {
                for (String key : document.keySet()) {
                    row.put(key, document.get(key));
                    if (!headers.contains(key)) {
                        headers.add(key);
                    }
                }
            }
            if (logEntry.containsKey("o2")) {
                System.out.println("o2");
                document = (Document) logEntry.get("o2");
//              HashMap<String, Object> row = new HashMap<String, Object>();
                for (String key : document.keySet()) {
                    row.put(key, document.get(key));
                    if (!headers.contains(key)) {
                        headers.add(key);
                    }
                }
            }
            rows.add((HashMap<String, Object>) row.clone());
        }
        int i = 0, j = 0;
        Object[][] data = new Object[rows.size()][headers.size()];
        for (HashMap<String, Object> r : rows) {
            
            for (String key : headers) {
                if(j == 0){
                    data[i][0] = i+1;
                    j++;
                    continue;
                }
                if (r.containsKey(key)) {
                    data[i][j] = r.get(key);
                } else {
                    data[i][j] = "";
                }

                j++;
            }
            i++;
            j = 0;
        }
        
        jTableDocumentVersions.setModel(new DefaultTableModel(data, headers.toArray()));
    }

    private void populateCollectionLog(String database, String collection) {

        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setFont(renderer.getFont().deriveFont(Font.BOLD));

        String[] columns = new String[]{"undo", "ts", "op", "ns", "o"};

        ArrayList<Object[]> dataList = new ArrayList<Object[]>();

        tblLog.removeAll();

        FindIterable<Document> it = MongoUndo.mongoClient.getDatabase("local").getCollection("oplog.$main")
                .find(new Document("ns", database + "." + collection));

        for (Document logEntry : it) {
            Object[] line = new Object[5];
            line[0] = false;
            line[1] = logEntry.get(columns[1]).toString();
            line[2] = logEntry.get(columns[2]).toString();
            line[3] = logEntry.get(columns[3]).toString();
            line[4] = logEntry.get(columns[4]).toString();

            dataList.add(line);

        }

        Object[][] data = new Object[dataList.size()][5];
        for (int i = 0; i < dataList.size(); i++) {
            JCheckBox undoCheckBox = new JCheckBox();

            data[i] = dataList.get(i);
        }
        DefaultTableModel tableModel = new DefaultTableModel(data, columns) {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                if (columnIndex == 0) {
                    return Boolean.class;
                }
                return String.class;
            }

            @Override
            public boolean isCellEditable(int row, int column) {
                return true;
            }

        };

        tblLog.setModel(tableModel);
        resizeColumnWidth(tblLog);

        DefaultListSelectionModel defaultListSelectionModel = new DefaultListSelectionModel();
        defaultListSelectionModel.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
//				if (e.getFirstIndex() != e.getLastIndex()){
//					lblTs.setText("");
//					lblNs.setText("");
//					lblOp.setText("");
//					lblO.setText("");
//				}else{
                lblTs.setText(data[e.getLastIndex()][1].toString());
                lblNs.setText(data[e.getLastIndex()][2].toString());
                lblOp.setText(data[e.getLastIndex()][3].toString());
                lblO.setText(data[e.getLastIndex()][4].toString());

//				}
            }
        });
        tblLog.setSelectionModel(defaultListSelectionModel);
    }

    public void resizeColumnWidth(JTable table) {
        final TableColumnModel columnModel = table.getColumnModel();
        for (int column = 0; column < table.getColumnCount(); column++) {
            int width = 50; // Min width
            for (int row = 0; row < table.getRowCount(); row++) {
                TableCellRenderer renderer = table.getCellRenderer(row, column);
                Component comp = table.prepareRenderer(renderer, row, column);
                width = Math.max(comp.getPreferredSize().width + 1, width);
            }
            columnModel.getColumn(column).setPreferredWidth(width);
        }
    }

}
